#!/usr/bin/env php
<?php
// Copyright 2008-2015 Mike Whiting (mail@mikejw.co.uk).
// This file is part of the Empathy MVC framework.

// Empathy is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Empathy is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with Empathy.  If not, see <http://www.gnu.org/licenses/>.

if(false == @include('./vendor/autoload.php')) {

    die('Please install composer deps.');
}

if(strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
    define('SEPARATOR', '\\');
} else {
    define('SEPARATOR', '/');
}
define('TPL_CACHE', './tpl/templates_c');
define('LIB_PATH', './vendor/mikejw/empathy');
define('ELIB_PUBLIC', '../vendor/mikejw/elib-base/public'); # relative to directory where symlink is created


function recursive_copy($src, $fdest, $app_name)
{
    $objects = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($src), RecursiveIteratorIterator::SELF_FIRST);
    foreach($objects as $name => $object) {        
        if(!preg_match('/\.$/', $name) && !is_dir($name)) {
            $dest = str_replace($src, '.', $name);
            $dest_dir = (dirname($dest));
            if(!is_dir($dest_dir)) {
                mkdir($dest_dir, 0777, true);
            }
            if(strpos($name, 'eaa.css')) {
                $dest = str_replace('eaa.css', $app_name.'.css', $dest);
            }
            copy($name, $dest);
        }
    }
}


function read_yaml($file)
{
    $rtnd = false;
    if(file_exists($file)) {
        $s = new \Spyc();
        $rtnd = $s->YAMLLoad($file); 
    }
    return $rtnd;
}

function write_yaml($data, $file)
{
    $rtnd = false;
    if(file_exists($file)) {
        $s = new \spyc();
        $rtnd = file_put_contents($file, $s->YAMLDump($data, 4, 60));
    }
    return $rtnd;   
}


function read_app_config()
{
    return read_yaml('./config.yml');
}

function read_global_config()
{
    return read_yaml(LIB_PATH.'/config.yml');
}

function execute($command)
{
    $output = array();
    $var = null;
    exec($command, $output, $var);
    //echo $command."\n";
}

function invalid_action()
{
    \cli\out_padded("Not a valid action. Run with --help (-h) flag.");
}


function new_app()
{
    $name = '';
    $web_root = '';
    $tmp_web_root = '';
    $tmp_doc_root = '';
    $doc_root = getcwd();
    $tmp_name = '';
    $tmp_doc_root = \cli\prompt("Please enter document root [$doc_root]", $doc_root);
    if($tmp_doc_root != '') {
        $doc_root = $tmp_doc_root;
    }

    $doc_root_arr = explode(SEPARATOR, $doc_root);
    $name = $doc_root_arr[sizeof($doc_root_arr) - 1]; 
    $web_root = 'localhost/'.$name;
    $tmp_name = \cli\prompt("Please enter name: [$name]", $name);    
    if($tmp_name != '') {
        $name = $tmp_name;
    }

    $tmp_web_root = \cli\prompt("Please enter web root: [$web_root]", $web_root);      
    if($tmp_web_root != '') {
        $web_root = $tmp_web_root;
    }

    recursive_copy(LIB_PATH.'/eaa', './', $name);

    $access_file = './public_html/htaccess';
    $access = str_replace('WEB_ROOT', $name.'/public_html/', file_get_contents($access_file));
    file_put_contents(str_replace('htaccess', '.htaccess', $access_file), $access);
    unlink($access_file);

    # new stuff...
    $cfg = read_app_config(); # call read config again
    $cfg['name'] = $name;
    $cfg['web_root'] = $web_root;
    $cfg['doc_root'] = $doc_root;

    $s = new \spyc();
    file_put_contents('./config.yml', $s->YAMLDump($cfg, true, 60));

    option_misc('tpl_cache');

    print "Done.\n";
}



function option_mysql($action)
{
    global $config, $app_config;

    if($action === "") {
        $action = 'dump';
    }

    switch($action){
        case 'setup':
            execute($config['mysql'].' -u root -h '.$app_config['db_server'].' --password='.$app_config['db_pass'].' < setup.sql');
            execute($config['mysql'].' -u root -h '.$app_config['db_server'].' --password='.$app_config['db_pass'].' < inserts.sql');   
            break;
        case 'dump':
            \cli\out_padded("Performing dump...");
            execute($config['mysql_dump'].' -u root -h '.$app_config['db_server'].' --password='.$app_config['db_pass']
                .' --no-create-info --complete-insert '.$app_config['db_name'].' > dump.sql');
            break;
        case 'populate':
            execute($config['mysql'].' -u root -h '.$app_config['db_server'].' --password='.$app_config['db_pass'].' < setup.sql');
            execute($config['mysql'].' -u root -h '.$app_config['db_server'].' --password='.$app_config['db_pass'].' '.$app_config['db_name'].' < dump.sql');
            break;
        case 'extra':
            execute($config['mysql'].' -u root -h '.$app_config['db_server'].' --password='.$app_config['db_pass'].' < extra.sql');
            break;
        default:
            invalid_action();
            break;
    }
}


function option_node($action)
{
    switch($action){
        case 'compile_less':

            $css_dir = './public_html/css/less';
            $less_command = './node_modules/.bin/lessc --compress';
            $less_files = $css_dir.'/*.less';
            $src_files = glob($less_files);

            foreach($src_files as $file) { 
                
                $css = preg_replace('/\.less/', '.css', $file);
                $command = "$less_command $file $css";
                execute($command); 
            }
            $init_css = './public_html/css/less/init.min.css';
            execute("cat $init_css $css > ./tmp.css; mv tmp.css $css");
            break;
        case 'compile_js':
            $yui_command = './node_modules/.bin/yuicompressor';
            $js_dir = './public_html/js';
            execute("cat $js_dir/common.js $js_dir/mikejw.js > ./tmp.js");
            $o_js = $js_dir.'/mikejw.min.js';
            execute("$yui_command -o $o_js ./tmp.js");
            unlink('./tmp.js');
            break;
        default:
            invalid_action();
            break;
    }

}


function option_misc($action)
{
    switch($action){
        case 'tpl_cache':
            if(!is_dir(TPL_CACHE)) {
                mkdir(TPL_CACHE, 0777, true);
            }
            chmod(TPL_CACHE, 0777);
            break;
        default:
            invalid_action();
            break;
    }

}


function assertConfig()
{
    if (!file_exists('./config.yml')) {
        copy('./config.yml.sample', './config.yml');
    }
    if (!file_exists('./public_html/.htaccess')) {
        copy('./public_html/htaccess', './public_html/.htaccess');
    }
}

function writeNewHTAccess()
{
    global $app_config;
    $web_arr = explode('/', $app_config['web_root']);
    array_shift($web_arr);

    if (sizeof($web_arr) > 0) {
        $ht_base = '/';
    } else {
        $ht_base = '';
    }
    $ht_base .= implode('/', $web_arr).$app_config['public_dir'].'/';

    $exec = "sed -i '/^RewriteBase/c ". 'RewriteBase '.$ht_base."' ./public_html/.htaccess";
    execute($exec);
}


function option_set_docroot($new)
{
    assertConfig();
    global $app_config;    
    $app_config['doc_root'] = $new;
    return write_yaml($app_config, './config.yml');
}


/* web root expected to begin with host
 * name or domain and not end in '/'
 *
 */
function option_set_webroot($new)
{
    assertConfig();
    global $app_config;    
    $app_config['web_root'] = $new;
    writeNewHTAccess();
    return write_yaml($app_config, './config.yml');
}

/* public dir expected to begin
 * with '/'. e.g. '/public_html'
 *
 */
function option_set_publicdir($new)
{
    assertConfig();
    global $app_config;    
    $app_config['public_dir'] = $new;
    writeNewHTAccess();
    return write_yaml($app_config, './config.yml');
}


function option_set_dbuser($new)
{
    assertConfig();
    global $app_config;    
    $app_config['db_user'] = $new;
    return write_yaml($app_config, './config.yml');
}

function option_set_dbpass($new)
{
    assertConfig();
    global $app_config;    
    $app_config['db_pass'] = $new;
    return write_yaml($app_config, './config.yml');
}

function option_set_elib()
{
    assertConfig();
    global $app_config;    
    $app_config['boot_options']['use_elib'] = true;
    return write_yaml($app_config, './config.yml');
}



function boot()
{
    $container = Empathy\MVC\DI::init(getcwd().'/', true);
    $empathy = $container->get('Empathy');
    $empathy->init();
    return $empathy;
}


function main()
{
    $version = defined('MVC_VERSION')? MVC_VERSION: '0.9.x';
    echo "\n
                                  __  __         
      ___  ____ ___  ____  ____ _/ /_/ /_  __  __
     / _ \/ __ `__ \/ __ \/ __ `/ __/ __ \/ / / /
    /  __/ / / / / / /_/ / /_/ / /_/ / / / /_/ / 
    \___/_/ /_/ /_/ .___/\__,_/\__/_/ /_/\__, /  
                 /_/                    /____/ v{$version}    
    \n\n";
    $arguments = new \cli\Arguments(array('strict' => true));
    $arguments->addFlag(array('help', 'h'), 'Show this help screen');
    $arguments->addFlag(array('new_app'), 'Create new app.');
    //$arguments->addFlag('version', 'Display the MVC version.');
    $arguments->addOption(array('mysql', 'm'), array(
                              'default'     => null,
                              'description' => 'Perform MySQL operation. Default is database dump.'));
    $arguments->addOption(array('node', 'n'), array(
                              'default'     => null,
                              'description' => 'Perform node.js operation.'));
    $arguments->addOption('misc', array(
                              'default'     => null,
                              'description' => 'Perform misc operation.'));
    $arguments->addOption('inst_mod', array(
                              'default'     => null,
                              'description' => 'Install/generate application extension module.'));
    $arguments->addOption('set_docroot', array(
                              'default'     => null,
                              'description' => 'Set the document root app-wide.'));
    $arguments->addOption('set_webroot', array(
                              'default'     => null,
                              'description' => 'Set the web root app-wide.'));
    $arguments->addOption('set_publicdir', array(
                              'default'     => null,
                              'description' => 'Set the public dir app-wide.'));
    $arguments->addOption('set_dbuser', array(
                              'default'     => null,
                              'description' => 'Set the db name.'));
    $arguments->addOption('set_dbpass', array(
                              'default'     => null,
                              'description' => 'Set the db password.'));
    $arguments->addOption('set_elib', array(                              
                              'description' => 'Enable elib.'));

    $arguments->parse();

    //echo $arguments->asJSON(); exit();

    if(isset($arguments['help']) && $arguments['help']) {
        \cli\out_padded($arguments->getHelpScreen());
        \cli\out_padded("\n");

    } elseif (isset($arguments['new_app']) && $arguments['new_app']) {
        new_app();

    } else {
        $valid_options = array(
            'mysql', 'node', 'misc',
            'inst_mod', 'set_docroot',
            'set_webroot', 'set_publicdir',
            'set_dbuser', 'set_dbpass', 'set_elib'
        );
        foreach($valid_options as $o) {
            if(isset($arguments[$o])) {
                $func = 'option_'.$o;
                $func($arguments[$o]);
            }
        }
    }
}

function option_inst_mod($module) {

    // currently no checks for lib
    $count = \Empathy\MVC\Util\ModuleGen::generate($module);
    \cli\out_padded($count.' controller(s) generated.');
}


$boot = null;
$app_config = read_app_config();
$config = read_global_config();

if($app_config !== false) {
    $boot = boot();
}
main();

//\Empathy\MVC\Util\CLI::setReqMode(\Empathy\MVC\Util\CLIMode::CAPTURED);
//echo \Empathy\MVC\Util\CLI::request($boot, '');


